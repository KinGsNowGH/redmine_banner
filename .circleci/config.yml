# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
orbs:
  aws-ecr: circleci/aws-ecr@6.2.0
  heroku: circleci/heroku@0.0.8

version: 2.1

general:
  artifacts:
    - coverage/${CIRCLE_PROJECT_REPONAME}_test/index.html

jobs:
  build:
    docker:
      # specify the version you desire here (ruby 2.4.x)
      - image: circleci/ruby:2.5-browsers-legacy
    steps:
      - checkout
  test:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.5-browsers-legacy
        environment:
          RAILS_ENV: test
          DB_HOST: 127.0.0.1
          DRIVER: headless
          TZ: /usr/share/zoneinfo/Asia/Tokyo
      - image: mysql:5.7
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_bin --innodb-large-prefix=true --innodb-file-format=Barracuda --sql-mode=""
        environment:
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: yes

    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: ready for redmine
          command: |
            REDMINE_BRANCH=master sh script/circleci-setup.sh
      - run: bundle install --path vendor/bundle --without postgresql rmagick && bundle update
      - run: bundle exec rails g rspec:install
      - run: bundle exec rake db:create RAILS_ENV=test
      - run: bundle exec rake db:migrate RAILS_ENV=test
      - run: bundle exec rake redmine:plugins:migrate RAILS_ENV=test
      - run:
          command: |
            bundle exec rake ${CIRCLE_PROJECT_REPONAME}:test RAILS_ENV=test
      - run:
          command: |
            bundle exec rake redmine:plugins:migrate NAME=${CIRCLE_PROJECT_REPONAME} \
                    VERSION=0 RAILS_ENV=test
      - run:
          command: |
            mkdir -p /tmp/coverage
            cp -r coverage/${CIRCLE_PROJECT_REPONAME}_test /tmp/coverage/
      - store_artifacts:
          path: /tmp/coverage
  deploy_heroku:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run:
          name: 'Install Heroku CLI, if necessary'
          command: |
            curl https://cli-assets.heroku.com/install.sh | sh
      - run:
          name: 'Build Docker Image'
          command: |
            heroku -v
            docker build --build-arg=COMMIT=${CIRCLE_SHA1} \
                --build-arg=BRANCH=${CIRCLE_BRANCH} -t registry.heroku.com/${HEROKU_APP_NAME}/web \
                -f script/Dockerfile_heroku .
      - run:
          name: heroku maintenance on
          command: heroku maintenance:on --app ${HEROKU_APP_NAME}
      - run:
          name: 'Release Docker Image'
          command: |
            docker login --username=_ --password=$HEROKU_AUTH_TOKEN registry.heroku.com
            docker push registry.heroku.com/${HEROKU_APP_NAME}/web
            heroku container:release web --app ${HEROKU_APP_NAME}
  migrate_heroku:
    executor: heroku/default
    steps:
      - heroku/install
      - run:
          name: heroku db migrate
          command: |
            heroku run rails db:migrate --app ${HEROKU_APP_NAME}
            heroku run rails redmine:plugins:migrate --app ${HEROKU_APP_NAME}
      - run:
          name: update pass
          no_output_timeout: 15m
          command: |
            heroku config:set BANNER_VER="redmine_banner_${CIRCLE_SHA1}" --app ${HEROKU_APP_NAME}
            heroku run rails runner plugins/redmine_banner/script/heroku_runner.rb --app ${HEROKU_APP_NAME}

      - run:
          name: heroku maintenance off
          command: |
            heroku config:unset BANNER_VER --app ${HEROKU_APP_NAME}
            heroku maintenance:off --app ${HEROKU_APP_NAME}

workflows:
  build_test_push:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - /ignore-build-.*/
                - master
      - test:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /v0.1.x-support-Redmine3.*/
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: Dockerfile
          path: .
          region: AWS_REGION
          repo: akiko/redmine_banner
          extra-build-args: '--build-arg COMMIT=$CIRCLE_SHA1 --build-arg=BRANCH=$CIRCLE_BRANCH'
          requires:
            - build
          filters:
            branches:
              only:
                - ecs-trial
      - deploy_heroku:
          requires:
            - test
          filters:
            branches:
              only:
                - heroku-config
                - dev
      - migrate_heroku:
          requires:
            - deploy_heroku



